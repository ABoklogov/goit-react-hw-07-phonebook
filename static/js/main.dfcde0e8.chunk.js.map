{"version":3,"sources":["components/ContactList/ContactItem/ContactItem.module.css","components/App/App.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-action.js","redux/contacts/contacts-selector.js","services/contacts-api.js","redux/contacts/contacts-operation.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/App/App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","newContact","payload","deleteContact","setContacts","chengeFilter","e","target","value","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","getContacts","state","contacts","items","getFilter","filter","getLoading","isLoading","getError","error","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","fetchContacts","a","axios","get","data","postContacts","post","deleteContacts","id","delete","defaults","baseURL","dispatch","action","contactsAPI","postContact","deletContacts","Filter","useSelector","contactsSelectors","useDispatch","className","s","input","type","onChange","contactsAction","ContactForm","useState","setName","number","setNumber","handleNameChenge","form","onSubmit","preventDefault","shortid","generate","some","el","alert","contactsOperation","text","pattern","title","required","btn","ContactItem","contactName","contactNumber","contactBtn","onClick","ContactList","visibleContacts","contactList","map","App","loading","useEffect","container","createReducer","_","contactsReducer","combineReducers","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfcde0e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactName\":\"ContactItem_contactName__2ndbC\",\"contactNumber\":\"ContactItem_contactNumber__2Wj5F\",\"contactBtn\":\"ContactItem_contactBtn__zB3y7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Bh9KG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__eK6lk\",\"contact\":\"ContactList_contact__2MleK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__29LLT\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contacts/Add', newContact => ({\n  payload: newContact,\n}));\n\nexport const deleteContact = createAction('contact/Delete');\n\nexport const setContacts = createAction('contacts/Set');\n\nexport const chengeFilter = createAction('contacts/Filter', e => ({\n  payload: e.target.value,\n}));\n\n//pending\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\n\n//fulfilled\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\n\n//rejected\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  [getFilter, getContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts?.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:3000';\n\nexport async function fetchContacts() {\n  const { data } = await axios.get('/contacts');\n  return data;\n}\n\nexport async function postContacts(contact) {\n  await axios.post('/contacts', contact);\n}\n\nexport async function deleteContacts(id) {\n  await axios.delete(`/contacts/${id}`);\n}\n","import * as action from './contacts-action';\nimport * as contactsAPI from 'services/contacts-api';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(action.fetchContactsRequest());\n\n  try {\n    const contacts = await contactsAPI.fetchContacts();\n    dispatch(action.fetchContactsSuccess(contacts));\n  } catch (error) {\n    dispatch(\n      action.fetchContactsError('error, there is no connection to the server'),\n    );\n  }\n};\n\nexport const postContact = contact => async dispatch => {\n  dispatch(action.fetchContactsRequest());\n\n  try {\n    await contactsAPI.postContacts(contact);\n    dispatch(action.fetchContactsSuccess());\n  } catch (error) {\n    dispatch(\n      action.fetchContactsError('error, there is no connection to the server'),\n    );\n  }\n};\n\nexport const deletContacts = id => async dispatch => {\n  dispatch(action.fetchContactsRequest());\n\n  try {\n    await contactsAPI.deleteContacts(id);\n    dispatch(action.fetchContactsSuccess());\n  } catch (error) {\n    dispatch(\n      action.fetchContactsError('error, there is no connection to the server'),\n    );\n  }\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsAction, contactsSelectors } from '../../redux/contacts';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={e => dispatch(contactsAction.chengeFilter(e))}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport shortid from 'shortid';\nimport {\n  contactsAction,\n  contactsOperation,\n  contactsSelectors,\n} from 'redux/contacts';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n\n  const handleNameChenge = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newContact = {\n      name,\n      number,\n      id: shortid.generate(),\n    };\n    const checkingContacts = el => el.name.toLowerCase() === name.toLowerCase();\n\n    if (contacts.some(checkingContacts)) {\n      alert(`${name} is alreaby in contacts`);\n      return;\n    }\n\n    dispatch(contactsAction.addContact(newContact));\n    dispatch(contactsOperation.postContact(newContact));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <p className={s.text}>Name</p>\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleNameChenge}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n      <p className={s.text}>Number</p>\n      <input\n        className={s.input}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleNameChenge}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n      />\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsAction, contactsOperation } from 'redux/contacts';\nimport s from './ContactItem.module.css';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const deleteContact = id => {\n    dispatch(contactsAction.deleteContact(id));\n    dispatch(contactsOperation.deletContacts(id));\n  };\n\n  return (\n    <>\n      <p className={s.contactName}>{name}:</p>\n      <p className={s.contactNumber}>{number}</p>\n      <button className={s.contactBtn} onClick={() => deleteContact(id)}>\n        delete\n      </button>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import { useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport s from './ContactList.module.css';\nimport ContactItem from './ContactItem';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(contactsSelectors.getVisibleContacts);\n\n  return (\n    <ul className={s.contactList}>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id} className={s.contact}>\n          <ContactItem id={id} name={name} number={number} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperation, contactsSelectors } from 'redux/contacts';\nimport s from './App.module.css';\nimport Filter from 'components/Filter';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(contactsSelectors.getLoading);\n  const error = useSelector(contactsSelectors.getError);\n\n  useEffect(() => {\n    dispatch(contactsOperation.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={s.container}>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      {loading && <h1>Loading...</h1>}\n      <ContactList />\n      {error && alert(error)}\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as action from './contacts-action';\n\nconst items = createReducer([], {\n  [action.addContact]: (state, { payload }) => [...state, payload],\n\n  [action.deleteContact]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n\n  [action.setContacts]: (_, { payload }) => [...payload],\n\n  [action.fetchContactsSuccess]: (_, { payload }) => payload,\n});\n\nconst filter = createReducer('', {\n  [action.chengeFilter]: (_, { payload }) => payload,\n});\n\nconst isLoading = createReducer(false, {\n  [action.fetchContactsRequest]: () => true,\n  [action.fetchContactsSuccess]: () => false,\n  [action.fetchContactsError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [action.fetchContactsError]: (_, { payload }) => payload,\n  [action.fetchContactsRequest]: () => null,\n});\n\nconst contactsReducer = combineReducers({\n  items,\n  filter,\n  isLoading,\n  error,\n});\n\nexport default contactsReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2y24h\",\"text\":\"ContactForm_text__X6aoT\",\"input\":\"ContactForm_input__1PIwF\",\"btn\":\"ContactForm_btn__mHRTK\"};"],"sourceRoot":""}